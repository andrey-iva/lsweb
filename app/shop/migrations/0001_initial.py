# Generated by Django 4.0.4 on 2022-07-26 14:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Читаемое название представленное в списке категорий', max_length=200, verbose_name='Название')),
                ('slug', models.CharField(help_text='Только: цифры, латинские символы, знаки тире и нижнего подчеркивания', max_length=200, unique=True, verbose_name='Слаг')),
            ],
            options={
                'verbose_name': 'Категорию',
                'verbose_name_plural': '5.Категории',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Имя')),
                ('subject', models.CharField(max_length=200, verbose_name='Тема сообщения')),
                ('email', models.EmailField(max_length=254)),
                ('notes', models.TextField(verbose_name='сообщение')),
                ('status', models.CharField(choices=[('no', 'Не прочитано'), ('ok', 'Прочитано')], default='no', max_length=20, verbose_name='Статус сообщения')),
            ],
            options={
                'verbose_name_plural': '4.Сообщения',
                'ordering': ('status',),
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy', models.CharField(max_length=30, verbose_name='С политикой сайта')),
                ('first_name', models.CharField(blank=True, max_length=50, verbose_name='имя')),
                ('last_name', models.CharField(blank=True, max_length=50, verbose_name='фамилия')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='страна')),
                ('region', models.CharField(blank=True, max_length=100, verbose_name='регион')),
                ('address', models.CharField(blank=True, max_length=250, verbose_name='адрес')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='индекс')),
                ('phone', models.CharField(max_length=100, verbose_name='телефон')),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('delivery_type', models.CharField(max_length=100, verbose_name='доставка')),
                ('grand_total', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Сумма')),
                ('notes', models.TextField(blank=True, max_length=500, verbose_name='примечание к заказу')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('paid', models.BooleanField(default=False, verbose_name='оплачен')),
                ('yookassa_id', models.CharField(blank=True, max_length=200, verbose_name='Юкасса ID транзакции')),
                ('yookassa_amount', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, verbose_name='Юкасса сумма')),
                ('yookassa_status', models.CharField(blank=True, max_length=30, verbose_name='Юкасса статус')),
                ('retail_crm_status', models.CharField(blank=True, max_length=30, verbose_name='CRM_ID')),
                ('status', models.CharField(choices=[('new', 'Новый'), ('arc', 'В архиве')], default='new', max_length=20, verbose_name='Статус')),
                ('yookassa_full_info', models.TextField(blank=True)),
                ('address_full_info', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': '1.Заказы',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Категория товара', max_length=300, verbose_name='Название')),
                ('slug', models.SlugField(help_text='Созданый слаг редактировать не рекомендуется', max_length=300, verbose_name='Слаг')),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Целые и плавающие числа', max_digits=10, verbose_name='Цена товара')),
                ('price_install', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Целые и плавающие числа, у типа товара как услуга и для "петли якорного крепления" должно быть установлено 0', max_digits=10, verbose_name='Цена установки')),
                ('item_number', models.CharField(blank=True, db_index=True, help_text='Текст', max_length=100, verbose_name='Артикул')),
                ('brand_car', models.CharField(blank=True, db_index=True, help_text='Текст', max_length=100, verbose_name='Марка машины')),
                ('model_car', models.CharField(blank=True, db_index=True, help_text='Текст', max_length=100, verbose_name='Модель машины')),
                ('year', models.CharField(blank=True, db_index=True, help_text='Текст', max_length=100, verbose_name='Год выпуска')),
                ('seat_type', models.CharField(blank=True, help_text='Текст', max_length=250, verbose_name='Тип сиденья')),
                ('product_type', models.CharField(blank=True, choices=[('услуга', 'Услуга'), ('рейка', 'Рейка'), ('кронштейн', 'Кронштейн')], help_text='Выбрать из списка тип товара, если выбрана услуга необходимо выбрать тип услуги ниже', max_length=20, verbose_name='Тип товара')),
                ('service_type', models.CharField(blank=True, choices=[('установка', 'Установка'), ('разработка', 'Разработка')], help_text='Выбрать из списка тип услуги, если тип товара установлен как услуга, иначе оставить пустым', max_length=20, verbose_name='Тип услуги')),
                ('order_type', models.CharField(blank=True, choices=[('kronshtejn', 'Кронштейн'), ('zamery', 'Подбор/разработка'), ('tretiy-ryad', 'Третий ряд'), ('kronshtejn-ustanovka', 'Установка'), ('reyka-ind', 'Рейка индив-ая'), ('reyka', 'Рейка станд-ая')], default='kronshtejn', max_length=30, verbose_name='RetailCRM Тип заказа')),
                ('weight', models.IntegerField(blank=True, default=1500, help_text='Вес товара должен быть указан в граммах', verbose_name='Вес товара СДЕК')),
                ('available', models.BooleanField(blank=True, default=True, help_text='Наличие товара, есть или нет', verbose_name='наличие')),
                ('image_base', models.ImageField(blank=True, help_text='Основное изображение товара', upload_to='products/%Y/%m/%d', verbose_name='Изображение')),
                ('video', models.FileField(blank=True, help_text='Для видео необходим скриншот будет лучше, если загружать оптимизированное видео', upload_to='video/%Y/%m/%d', verbose_name='Видео')),
                ('video_shot', models.ImageField(blank=True, help_text='Скриншот для видео, размер скриншота должен соответствовать размеру изображения         товара или соотношение сторон должно быть одинаковым', upload_to='video/shot/%Y/%m/%d', verbose_name='Заставка для видео')),
                ('frame_video', models.TextField(blank=True, default='')),
                ('description_short', models.TextField(blank=True, verbose_name='Краткое описание')),
                ('description_full', models.TextField(blank=True, verbose_name='Полное описание')),
                ('seo_title', models.TextField(blank=True, help_text='Обязательно для заполнения', verbose_name='SEO title')),
                ('seo_key', models.TextField(blank=True, verbose_name='SEO keys')),
                ('seo_desc', models.TextField(blank=True, verbose_name='SEO content')),
                ('attribute', models.CharField(blank=True, default='', help_text='Поле используется для индефикации товара, в частности для "петли якорного крепления"', max_length=30, verbose_name='Атрибут')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='shop.category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': '2.Товары',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, upload_to='products/%Y/%m/%d')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='shop.product', verbose_name='Изображение')),
            ],
            options={
                'verbose_name_plural': '6.Галерея',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, verbose_name='заголовок')),
                ('slug', models.SlugField(max_length=250, unique_for_date='publish', verbose_name='слаг')),
                ('image_preview', models.ImageField(blank=True, null=True, upload_to='blog_posts/%Y/%m/%d', verbose_name='изображение')),
                ('body_preview', models.TextField(verbose_name='отрывок статьи')),
                ('body', models.TextField(verbose_name='текст статьи')),
                ('publish', models.DateTimeField(default=django.utils.timezone.now, verbose_name='дата публикации')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('draft', 'Не опубликовано'), ('published', 'Опубликовано')], default='draft', max_length=10, verbose_name='статус')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL, verbose_name='автор')),
            ],
            options={
                'verbose_name_plural': '3.Обзоры',
                'ordering': ('publish',),
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('install', models.BooleanField(default=False, verbose_name='установка')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='цена')),
                ('price_install', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='цена установки')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='колличество')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='shop.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='shop.product', verbose_name='товар')),
            ],
            options={
                'verbose_name_plural': 'товары',
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['id', 'slug'], name='shop_produc_id_f21274_idx'),
        ),
    ]
