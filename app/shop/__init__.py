from yookassa import Configuration

# python manage.py runserver_plus --cert-file cert.pem --key-file key.pem localhost:8000
# --keep-meta-shutdown localhost:9000
# python manage.py createcachetable
# python -m smtpd -n -c DebuggingServer localhost:1025

POSTS_DETAIL_CACHE_TIME = 60 * 60 * 24 * 7

# 5.2631
PERCENT = 5

# retailcrm
RETAIL_SITE = 'isofix-msk-ru'
RETAIL_HOST = 'https://isofix-msk.retailcrm.ru'
RETAIL_CRM_ID = 'dV820029C6QSbh9iaHyTcZ4veHKhA46v'
RETAIL_BRAND_CODE = {
 'AUDI': 'audi',
 'BMW': 'bmw',
 'CADILLAC': 'cadillac',
 'CHEVROLET': 'chevrolet',
 'CITROEN': 'citroen',
 'DAEWOO': 'daewoo',
 'DATSUN': 'datsun',
 'FIAT': 'fiat',
 'FORD': 'ford',
 'GAZ': 'gaz',
 'GEELY': 'geely',
 'HONDA': 'honda',
 'HYUNDAI': 'hyundai',
 'INFINITI': 'infiniti',
 'JAGUAR': 'jaguar',
 'JEEP': 'jeep',
 'KIA': 'kia',
 'LADA': 'lada_vaz',
 'LAND-ROVER': 'land_rover',
 'LEXUS': 'lexus',
 'MAZDA': 'mazda',
 'MERCEDES-BENZ': 'mercedes-benz',
 'MINI': 'mini',
 'MITSUBISI': 'mitsubishi',
 'NISSAN': 'nissan',
 'OPEL': 'opel',
 'PEUGEOT': 'peugeot',
 'PORSCHE': 'porsche',
 'PORSHE': 'porsche',
 'RENAULT': 'renault',
 'SEAT': 'seat',
 'SKODA': 'skoda',
 'SMART': 'smart',
 'SSANG-YONG': 'ssangyong',
 'SUBARU': 'subaru',
 'SUZUKI': 'suzuki',
 'TOYOTA': 'toyota',
 'VOLKSWAGEN': 'volkswagen',
 'VOLVO': 'volvo',
 }

# yookassa
Configuration.account_id = '916495'
Configuration.secret_key = 'test_CfzqjiBE19hkQ4Xe37Yckd0W_xwimJRLpyl0Hok4Mes'
# PAYMENT_REDIRECT_PAGE = 'http://andreyiva.pythonanywhere.com/order/created/'
# PAYMENT_WAITING_TIME = 600

# Configuration.account_id = '916494'
# Configuration.secret_key = 'test_ptA6-o_oaTCYnc9R0Fvh-WIXe50UNgXKIUob2qZT86I'
PAYMENT_REDIRECT_PAGE = 'http://127.0.0.1:8000/order/created/'
PAYMENT_WAITING_TIME = 60

# cdek
# PROD = False
# CLIENT_ID = 'EMscd6r9JnFiQ3bLoyjJY6eM78JrJceI'
# CLIENT_SECRET = 'PjLZkKBHEiLK3YsjtNrt3TGNG0ahs3kG'

PROD = True
CLIENT_ID = 'J0WbjKwXqA6EaIv3BHGw26B4YHnXiG0g'
CLIENT_SECRET = 'fBTBvteAjRPyjwWpKbqg9Vd1YkU1UQmh'

WEIGHT = 1500
BOX = 'WASTE_PAPER'  # order.js
# 55.645283, 37.403216
FROM_LOCATION = {
    'code': 44,
    'country_code': 'RU',
    'city': 'Москва',
    'address': 'г. Москва, Солнцево, ул.Щорса, д.8 стр.1',
}

TARIFF_CODES = {
    '136': 'Посылка склад-склад',
    '137': 'Посылка склад-дверь',
}

# app
CART_SESSION_ID = 'cart'
GRAND_TOTAL_ID = 'gt'
NO_IMAGE_PATH = '/static/shop/images/no_image/placeholder.jpg'
ADMIN_EMAIL_ORDER_INFO = 'info@isofix-msk.ru'
ADMIN_EMAIL = 'site-admin@email.ru'


'''

"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.getenv(
    'SECRET_KEY', 'django-insecure-8*h^9)x&u3ttu^_k)rxg&_c&n7^n&es)i*^43b*$t-fjiu^hkb')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'shop.apps.ShopConfig',
    'django_summernote',
    'import_export',

    # "django_extensions",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'shop.shop_midd.shop_middleware'
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'shop', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'shop.ctx_proc.cart',
                'shop.ctx_proc.currency',
                'shop.ctx_proc.categories',
                'shop.ctx_proc.no_image',
                'shop.ctx_proc.get_services',
                'shop.ctx_proc.get_loop_id',
                'shop.ctx_proc.get_loop_price',
                'shop.ctx_proc.is_install',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
#     }
# }

# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
#         'LOCATION': 'shop_cache_table',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# my-app
STATIC_ROOT = 'static/'
MEDIA_ROOT = 'media/'
MEDIA_URL = 'media/'


ADMINS = (
    ('Andrey', 'andrey.iv.cherkessk@gmail.com'),
    ('Andrey', 'andrey.cherkessk@yandex.ru'),
)
MANAGERS = ADMINS

if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = "smtp.gmail.com"
    EMAIL_HOST_USER = "andrey.iv.cherkessk@gmail.com"
    EMAIL_HOST_PASSWORD = 'andrey42903891'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    # EMAIL_PORT = 465
    # EMAIL_USE_SSL = True

# SESSION_EXPIRE_AT_BROWSER_CLOSE = False
# SESSION_COOKIE_AGE = 60

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '[%(asctime)s %(levelname)-1s] %(message)s'
        },
        # 'file': {
        #     'format': '%(asctime)s %(name)-1s %(levelname)-1s %(message)s'
        # }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
        # 'file': {
        #     'level': 'DEBUG',
        #     'class': 'logging.FileHandler',
        #     'formatter': 'file',
        #     'filename': 'debug.log'
        # }
    },
    'loggers': {
        '': {
            'level': 'DEBUG',
            'handlers': ['console']
            # 'handlers': ['console', 'file']
        }
    }
}

# CORS_ALLOWED_ORIGINS = []
# SESSION_COOKIE_DOMAIN = None

IMPORT_EXPORT_USE_TRANSACTIONS = True
SUMMERNOTE_THEME = 'bs4'
SUMMERNOTE_CONFIG = {'lang': 'ru-RU'}



# urls

"""app URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('', include('shop.urls')),
    path('admin/', admin.site.urls),
    path('summernote/', include('django_summernote.urls')),
]


if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL,
                          document_root=settings.MEDIA_ROOT)

'''